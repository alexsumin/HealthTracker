configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

configure(subprojects) {
    apply plugin: 'io.spring.dependency-management'
    apply plugin: 'java'
}

configure(project('core-api')) {
    dependencies {
        implementation 'org.springframework.boot:spring-boot-starter-web'
        compileOnly 'org.projectlombok:lombok'
        annotationProcessor 'org.projectlombok:lombok'
    }
}

configure(project('app')) {
    apply plugin: 'org.springframework.boot'

    dependencies {
        implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
        implementation 'org.springframework.boot:spring-boot-starter-web'
        implementation 'org.springframework.cloud:spring-cloud-starter-config'
        implementation 'org.springframework.cloud:spring-cloud-starter-openfeign'
        implementation 'org.springframework.cloud:spring-cloud-starter-netflix-eureka-client'
        implementation 'org.springframework.boot:spring-boot-starter-validation'
        implementation 'org.liquibase:liquibase-core'
        implementation(project(':core:core-api'))
        implementation(project(':pic-generator:pic-api'))

        runtimeOnly 'org.postgresql:postgresql:42.2.16'

        compileOnly 'org.projectlombok:lombok'
        annotationProcessor 'org.projectlombok:lombok'
        testAnnotationProcessor 'org.projectlombok:lombok'

        implementation "org.mapstruct:mapstruct:1.4.1.Final"
        annotationProcessor "org.mapstruct:mapstruct-processor:1.4.1.Final"
        testAnnotationProcessor "org.mapstruct:mapstruct-processor:1.4.1.Final"

        testImplementation('org.springframework.boot:spring-boot-starter-test') {
            exclude group: 'org.junit.vintage', module: 'junit-vintage-engine'
        }
        testImplementation("org.testcontainers:testcontainers:1.14.3")
        testImplementation("org.testcontainers:junit-jupiter:1.14.3")
        testImplementation("org.testcontainers:postgresql:1.14.3")
    }
    bootJar {
        archiveFileName = 'app.jar'
    }
    test {
        useJUnitPlatform()
    }
}

apply plugin: 'com.palantir.docker'


docker {
    name = "core:${project.version}"
    files 'app/build/libs/app.jar'
}
